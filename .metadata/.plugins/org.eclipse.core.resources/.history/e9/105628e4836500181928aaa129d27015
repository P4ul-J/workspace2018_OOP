/*!\file CArrayDec.hpp
* \brief LZW Decoder, Dictionary implementiert als Array
 *
 *	Dieses File enthält die Klasse CArrayDec
 *	Notwendig für Teil 1 des Praktikums
 *  Created on: 24.05.2018
 *      Author: diamo
 */

#ifndef CARRAYDEC_HPP_
#define CARRAYDEC_HPP_

#include "CEntry.hpp"
#include "CArray.hpp"
#include <string>
#include <vector>
#include "CDec.hpp"
/*!
 * \class CArrayDec
 * \brief LZW Decoder
 * Klasse für die Decodierung
 * erbt von CDec
 *
 */
class CArrayDec : public CDec {
private:
	//! Dictionary implementiert als Array vom Typ CEntry, LZW_DICT_SIZE -> Makro für die Größe
	CArray<CEntry, LZW_DICT_SIZE> m_symbolTable;
	//! index, der hinter den neusten Eintrag zeigt, erleichtert das einfügen von neuen  Zeichenketten
	unsigned int m_index; //für einen Besseren überblick über den neuesten eintrag / element
	/*!
	 * Sucht eine Zeichenkette im Dictionary
	 * @param whereAmI Gesuchte Zeichenkette
	 * @return Position an dem die Zeichenkette gefunden wurde, -1 wenn nicht gefunden
	 */
	int searchInTable(const std::string& whereAmI );
public:
	/*!
	 * \brief Parameterloser Konstuktor der Klasse
	 * initialisiert das Dicitonary mit den ersten 256 ASCII Zeichen
	*/
	CArrayDec();

	/*!
	 * LZW decoder-function
	 * @param enc decodierender Vector (/ Folge von Indizes )
	 * @return entschlüsselte Zeichenkette
	 */
	std::string decode(const std::vector<unsigned int>& enc);

};

#endif /* CARRAYDEC_HPP_ */
